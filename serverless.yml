service: bubbler-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table names here so we can use it while testing locally
  connectionsTableName: ${self:custom.stage}-connections
  postsTableName: ${self:custom.stage}-posts
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 2
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # serverless-webpack configuration
  # Enable auto-packing of external modules
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# AWS serverless config
provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-2

  # Custom routes are selected by the value of the action property in the body.
  websocketsApiRouteSelectionExpression: $request.body.action

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    connectionsTableName: ${self:custom.connectionsTableName}
    postsTableName: ${self:custom.postsTableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - Fn::GetAtt: [ PostsTable, Arn ]
        - Fn::GetAtt: [ ConnectionsTable, Arn ]

# AWS Lambda functions
functions:

  # [START] Websocket API

  # Handle connection and disconnection of clients
  connect:
    handler: connectionHandler.connect
    events:
      - websocket: 
          route: $connect
  disconnect:
    handler: connectionHandler.disconnect
    events:
      - websocket: 
          route: $disconnect
  # Just in case we are getting weird / bad data,
  # we can react to it with a sane response
  default:
    handler: default.main
    events:
      - websocket: 
          route: $default
  # Handle adding a new post.
  addNewPost: 
    handler: addNewPost.main
    events:
      - websocket: 
          route: addNewPost
  # Handle deletion of a post.
  deletePost: 
    handler: deletePost.main
    events:
      - websocket: 
          route: deletePost
  # Handle update of a post.
  updatePost: 
    handler: updatePost.main
    events:
      - websocket: 
          route: updatePost
          
  # [END] Websocket API
  # [START] REST API

  # Defines an HTTP API endpoint that calls the main function in getFeed.js
  # - path: url path is /feed-history
  # - method: GET request
  getFeedHistory:
    handler: getFeedHistory.main
    events:
      - http:
          path: feed-history
          method: get
          cors: true
          authorizer: aws_iam
  # Defines an HTTP API endpoint that calls the main function in getSystembolagetData.js
  # - path: url path is /systembolaget
  # - method: GET request
  getSystembolagetData:
    handler: getSystembolagetData.main
    events:
      - http:
          path: systembolaget
          method: get
          cors: true
  
  # [END] REST API
  
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-posts-table.yml)}
  - ${file(resources/dynamodb-connections-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}


